scalar DateTime

input ListLimit {
    skip: Int = 0
    limit: Int = 10
}

input PeriodInput {
    from: DateTime!
    to: DateTime!
}

input UsersSearchInput {
    _id: [Int!]
    name: String
    email: String
}

input PostsSearchInput {
    user_id: Int
    text: String
    created: PeriodInput
}

input ProductsSearchInput {
    _id: [Int!]
    name: String
    code: String
    date: DateTime
}

type Query {
    post(_id: Int!): Post
    user(_id: Int!): User
    productGeneralInformation(_id: Int!): ProductGeneralInformation
    productOptionsSettings(_id: Int!): ProductOptionsSettings
    users(limit: ListLimit = {}, search: UsersSearchInput = {}): UsersList!
    posts(limit: ListLimit = {}, search: PostsSearchInput = {}): PostsList!
    products(limit: ListLimit = {}, search: ProductsSearchInput = {}): ProductsList!
}

interface ListNode {
    count: Int!
    skip: Int!
    limit: Int!
}

type UsersList implements ListNode {
    node: [User!]!
    count: Int!
    skip: Int!
    limit: Int!
}

type UserStats {
    posts: Int!
}

type User {
    _id: Int!
    name: String!
    email: String!
    password: String!
    posts: [Post!]!
    stats: UserStats!
    created: DateTime!
}

type PostsList implements ListNode {
    node: [Post!]!
    count: Int!
    skip: Int!
    limit: Int!
}

type Post {
    _id: Int!
    text: String!
    user: User!
    user_id: Int!
    created: DateTime!
}

type ProductsList implements ListNode {
    node: [Product!]!
    count: Int!
    skip: Int!
    limit: Int!
}

type Product {
    _id: Int!
    image: String!
    name: String!
    code: String!
    status: String!
    price: Float!
    list_price: Float!
    quantity: Int!
    created: DateTime!
}

type ProductGeneralInformation {
    _id: Int!
    image: String!
    name: String!
    status: String!
    price: Float!
    vendor: String!
    fullDescription: String!
}

type ProductOptionsSettings {
    _id: Int!
    optionsType: String!
    exceptionsType: String!
}

