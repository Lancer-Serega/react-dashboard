scalar DateTime

input ListLimit {
    skip: Int = 0
    limit: Int = 10
}

input PeriodInput {
    from: DateTime!
    to: DateTime!
}

type Query {
    posts(limit: ListLimit = {}, search: PostsSearchInput = {}): PostsList!
    post(_id: Int!): Post

    users(limit: ListLimit = {}, search: UsersSearchInput = {}): UsersList!
    user(_id: Int!): User

    products(limit: ListLimit = {}, search: ProductsSearchInput = {}): ProductsList!
    product(_id: Int!): Product

    orders(limit: ListLimit = {}, search: OrdersSearchInput = {}): OrdersList!
    order(_id: Int!): Order
}

interface ListNode {
    count: Int!
    skip: Int!
    limit: Int!
}

# Filters
input UsersSearchInput {
    _id: [Int!]
    name: String
    email: String
}

input PostsSearchInput {
    user_id: Int
    text: String
    created: PeriodInput
}

input ProductsSearchInput {
    _id: [Int!]
    idAli: [Int!]
    title: String
    vendor: [String!]
    status: [String!]
    date: [DateTime!]
}

input OrdersSearchInput {
    _id: [Int!]
    productId: [Int!]
    productTitle: [String!]
    created: [DateTime!]
    customerId: [Int!]
    customerName: [String!]
    customerAddress: [String!]
    buyerId: [Int!]
    buyerEmail: [String!]
    buyerName: [String!]
    buyerAddress: [String!]
    vendorId: [Int!]
    vendorName: [String!]
    vendorStatus: [String!]
    vendorNumber: [String!]
    price: [Float!]
    dwStatus: [String!]
    dwNumber: [String!]
    shippingMethod: [String!]
    shippingCountry: [String!]
    trackingNumber: [String!]
}
# End Filters

# User
type UsersList implements ListNode {
    node: [User!]!
    count: Int!
    skip: Int!
    limit: Int!
}

type UserStats {
    posts: Int!
}

type User {
    _id: Int!
    name: String!
    email: String!
    password: String!
    posts: [Post!]!
    stats: UserStats!
    created: DateTime!
}

# Post
type PostsList implements ListNode {
    node: [Post!]!
    count: Int!
    skip: Int!
    limit: Int!
}

type Post {
    _id: Int!
    text: String!
    user: User!
    user_id: Int!
    created: DateTime!
}

# Product
type ProductsList implements ListNode {
    node: [Product!]!
    count: Int!
    skip: Int!
    limit: Int!
}

type Product {
    _id: Int!
    idVendor: Int!
    image: String!
    title: String!
    fullDescription: String!
    price: Float!
    listPrice: Float!
    status: String!
    quantity: Int!
    count: Int!
    vendor: String!
    created: DateTime!
    category: String!
    linkToDw: String!
    linkToVendor: String!
}

# Order
type OrdersList implements ListNode {
    node: [Order!]!
    count: Int!
    skip: Int!
    limit: Int!
}

type Order {
    _id: Int!
    product: [Product!]!
    created: DateTime!
    customerId: Int!
    customerName: String!
    customerAddress: String!
    buyerId: Int!
    buyerEmail: String!
    buyerName: String!
    buyerAddress: String!
    vendorId: Int!
    vendorName: String!
    vendorStatus: String!
    vendorNumber: Int!
    cost: Float!
    shippingMethod: String!
    shippingCountry: String!
    trackingNumber: [String!]!
    errorNotes: [String!]!
    numberDW: Int!
    statusDW: String!
}
